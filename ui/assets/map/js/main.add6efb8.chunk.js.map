{"version":3,"sources":["map/SelectableRoute.jsx","map/MapPane.jsx","table/TablePane.jsx","App.jsx","index.js"],"names":["ROUTE_STYLES","PRIMARY","_","weight","color","SECONDARY","SelectableRoute","props","GeoJSON","ref","selected","leafletElement","openPopup","data","geom_kml","onClick","style","route_type","Popup","Typography","href","id","variant","component","description","lower_date","upper_date","MapPane","e","Bounds","extent","merge","routes","map","r","bounds","isNaN","Map","onPopupClose","onSelect","LayersControl","position","BaseLayer","checked","name","TileLayer","url","attribution","route","key","TablePane","Paper","elevation","Table","aria-label","TableHead","TableRow","TableCell","TableBody","hover","lower_date_error","upper_date_error","App","state","onSelectRoute","setState","axios","get","then","response","Grid","container","CssBaseline","item","xs","className","this","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.add6efb8.chunk.js","sourcesContent":["import React from 'react';\nimport { GeoJSON, Popup } from 'react-leaflet';\nimport { Typography } from '@material-ui/core';\n\nconst ROUTE_STYLES = {\n  PRIMARY:   _ => ({ weight: 5, color: 'rgb(0, 0, 0)' }),\n  SECONDARY: _ => ({ weight: 3, color: 'rgba(0, 0, 0, 0.8)' })\n}\n\nconst SelectableRoute = props => {\n\n  const init = ref => {\n    if (ref && props.selected) ref.leafletElement.openPopup();\n  }\n  \n  return (\n    <GeoJSON \n      ref={init} \n      data={props.geom_kml} \n      onClick={props.onClick}\n      style={ROUTE_STYLES[props.route_type]}>\n\n      <Popup>\n        <Typography>\n          <a href={`crud/routes/read/${props.id}`}>{props.id}</a>\n        </Typography>\n\n        <Typography variant=\"body2\" component=\"p\">\n          {props.description}\n        </Typography>\n\n        <Typography variant=\"body2\" component=\"p\" color=\"textSecondary\">\n          {props.lower_date} - {props.upper_date}\n        </Typography>\n      </Popup>\n    </GeoJSON>\n  )\n\n}\n\nexport default SelectableRoute;","import React from 'react'; \nimport { LayersControl, Map, TileLayer } from 'react-leaflet';\nimport { merge } from '@mapbox/geojson-merge';\nimport Bounds from 'geojson-bounds';\nimport SelectableRoute from './SelectableRoute';\n\nconst MapPane = props => {\n\n  const e = Bounds.extent(merge(props.routes.map(r => r.geom_kml)));\n  const bounds = isNaN(e[0]) ? [[-90, -80], [90, 80]] : [[ e[1], e[0] ], [ e[3], e[2] ]];\n\n  return (\n    <Map bounds={bounds} onPopupClose={props.onSelect()}>\n      <LayersControl position=\"topright\">\n        <LayersControl.BaseLayer checked name=\"Digital Atlas of the Roman Empire\">\n          <TileLayer \n              url=\"http://dare.ht.lu.se/tiles/imperium/{z}/{x}/{y}.png\"\n              attribution=\"Tiles: <a href='http://imperium.ahlfeldt.se/'>DARE 2014</a>\" />\n        </LayersControl.BaseLayer>\n\n        <LayersControl.BaseLayer name=\"Ancient World Mapping Center\">\n          <TileLayer\n            url=\"http://a.tiles.mapbox.com/v3/isawnyu.map-knmctlkh/{z}/{x}/{y}.png\"\n            attribution=\"Tiles &copy; <a href='http://mapbox.com/'>MapBox</a> | Tiles and Data &copy; 2013 <a href='http://www.awmc.unc.edu'>AWMC</a>\" />\n        </LayersControl.BaseLayer>\n\n        <LayersControl.BaseLayer name=\"OpenStreetMap\">\n          <TileLayer\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\" />\n        </LayersControl.BaseLayer>\n      </LayersControl>\n\n      { props.routes.map(route => \n        <SelectableRoute \n          key={route.id} \n          selected={route.id === props.selected} \n          onClick={props.onSelect(route)}\n          {...route} />\n      )}        \n    </Map>\n  )\n\n}\n\nexport default MapPane;","import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nconst TablePane = props => {\n\n  return (\n    <Paper elevation={3}>\n      <Table aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Id</TableCell>\n            <TableCell>Description</TableCell>\n            <TableCell>Lower Date</TableCell>\n            <TableCell>Lower Date Error</TableCell>\n            <TableCell>Upper Date</TableCell>\n            <TableCell>Upper Date Error</TableCell>\n            <TableCell>Route Type</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          { props.routes.map(route => \n            <TableRow\n              hover\n              key={route.id}\n              onClick={props.onSelect(route)} \n              selected={route.id === props.selected}>\n                \n              <TableCell>{route.id}</TableCell>\n              <TableCell>{route.description}</TableCell>\n              <TableCell>{route.lower_date}</TableCell>\n              <TableCell>{route.lower_date_error}</TableCell>\n              <TableCell>{route.upper_date}</TableCell>\n              <TableCell>{route.upper_date_error}</TableCell>\n              <TableCell>{route.route_type}</TableCell>\n            </TableRow>\n          )}\n        </TableBody>\n      </Table>\n    </Paper>\n  )\n\n}\n\nexport default TablePane;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\n\nimport MapPane from './map/MapPane';\nimport TablePane from './table/TablePane';\n\nimport './App.css';\n\nexport default class App extends Component {\n\n  state = {\n    routes: [],\n    selected: null\n  }\n\n  componentDidMount() {\n    axios.get('/api/routes').then(response => {\n      this.setState({ routes: response.data });\n    });\n  }\n\n  onSelectRoute = route => _ => {\n    if (route)\n      this.setState({ selected: route.id });\n    else \n      this.setState({ selected: null });\n  }\n\n  render() {\n    return (\n      <Grid container component=\"main\">\n        <CssBaseline />\n        <Grid item xs={7} className=\"table-pane\">\n          <TablePane \n            routes={this.state.routes} \n            selected={this.state.selected} \n            onSelect={this.onSelectRoute} />\n        </Grid>\n        \n        <Grid item xs={5} component={Paper} elevation={3}>\n          <MapPane \n            routes={this.state.routes} \n            selected={this.state.selected}\n            onSelect={this.onSelectRoute} />\n        </Grid>\n      </Grid>\n    )\n  }\n\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}